// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Meeting {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  slug                   String?
  name                   String
  timezone               String?
  day                    Int?
  time                   String?
  types                  String?
  languages              String?
  duration               Int?
  notes                  String?
  conference_url         String?
  conference_url_notes   String?
  conference_phone       String?
  conference_phone_notes String?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  activity               Activity[]

  @@fulltext([name, slug, notes])
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  email            String     @unique
  emailHash        String
  loginToken       String?
  name             String?
  currentAccountID String
  accountIDs       String[]   @db.ObjectId
  accounts         Account[]  @relation(fields: [accountIDs], references: [id])
  activityIDs      String[]   @db.ObjectId
  activities       Activity[] @relation()
}

model Account {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  url          String
  theme        String
  meetingCount Int
  userIDs      String[] @db.ObjectId
  users        User[]   @relation(fields: [userIDs], references: [id])
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userID    String   @db.ObjectId
  user      User     @relation(fields: [userID], references: [id])
  type      String
  meetingID String   @db.ObjectId
  meeting   Meeting  @relation(fields: [meetingID], references: [id])
  changes   Change[]
}

model Change {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  field      String
  before     String
  after      String
  activityID String   @db.ObjectId
  activity   Activity @relation(fields: [activityID], references: [id])
}
