// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  url        String
  theme      String
  meetingIDs String[]  @db.ObjectId
  meetings   Meeting[]
  groupIDs   String[]  @db.ObjectId
  groups     Group[]
  userIDs    String[]  @db.ObjectId
  users      User[]    @relation("AccountUsers", fields: [userIDs], references: [id])
  adminIDs   String[]  @db.ObjectId
  admins     User[]    @relation("AccountAdmins", fields: [adminIDs], references: [id])
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userID    String   @db.ObjectId
  user      User     @relation(fields: [userID], references: [id])
  type      String
  groupID   String?  @db.ObjectId
  group     Group?   @relation(fields: [groupID], references: [id], onDelete: Cascade)
  meetingID String?  @db.ObjectId
  meeting   Meeting? @relation(fields: [meetingID], references: [id], onDelete: Cascade)
  changes   Change[]
  createdAt DateTime @default(now())
}

model Change {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  field      String
  before     String?
  after      String?
  activityID String   @db.ObjectId
  activity   Activity @relation(fields: [activityID], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Geocode {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  meetings          Meeting[]
  searches          Geoquery[]
  neighborhood      String?
  city              String?
  state             String?
  country           String?
  formatted_address String     @unique
  latitude          Float?
  longitude         Float?
  north             Float?
  east              Float?
  south             Float?
  west              Float?
  location_type     String?
  place_id          String
  plus_code         String?
  timezone          String?
  types             String?
  response          String
  createdAt         DateTime   @default(now())
}

model Geoquery {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  query     String    @unique
  geocodeID String?   @db.ObjectId
  geocode   Geocode?  @relation(fields: [geocodeID], references: [id])
  createdAt DateTime  @default(now())
  queriedAt DateTime?
  meetings  Meeting[]
}

model Group {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  meetings  Meeting[]
  name      String
  notes     String?
  recordID  String?
  email     String?
  website   String?
  phone     String?
  venmo     String?
  square    String?
  paypal    String?
  userIDs   String[]   @db.ObjectId
  users     User[]     @relation(fields: [userIDs], references: [id])
  accountID String     @db.ObjectId
  account   Account    @relation(fields: [accountID], references: [id], onDelete: Cascade)
  activity  Activity[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([accountID, name, recordID])
  @@fulltext([name, notes, website, recordID])
}

model Language {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  code       String    @unique
  meetingIDs String[]  @db.ObjectId
  meetings   Meeting[] @relation(fields: [meetingIDs], references: [id])
}

model Meeting {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  slug                   String
  name                   String
  timezone               String?
  day                    Int?
  time                   String?
  languageIDs            String[]   @db.ObjectId
  languages              Language[] @relation(fields: [languageIDs], references: [id])
  typeIDs                String[]   @db.ObjectId
  types                  Type[]     @relation(fields: [typeIDs], references: [id])
  duration               Int?
  notes                  String?
  conference_url         String?
  conference_url_notes   String?
  conference_phone       String?
  conference_phone_notes String?
  location               String?
  location_notes         String?
  archived               Boolean    @default(false)
  geocodeID              String?    @db.ObjectId
  geocode                Geocode?   @relation(fields: [geocodeID], references: [id])
  geoqueryID             String?    @db.ObjectId
  geoquery               Geoquery?  @relation(fields: [geoqueryID], references: [id])
  activity               Activity[]
  accountID              String     @db.ObjectId
  account                Account    @relation(fields: [accountID], references: [id], onDelete: Cascade)
  groupID                String     @db.ObjectId
  group                  Group      @relation(fields: [groupID], references: [id], onDelete: Cascade)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  @@fulltext([name, slug, notes])
}

model Type {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  code       String    @unique
  meetingIDs String[]  @db.ObjectId
  meetings   Meeting[] @relation(fields: [meetingIDs], references: [id])
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String     @unique
  emailHash        String
  lastSeen         DateTime?
  loginToken       String?
  currentAccountID String
  groupIDs         String[]   @db.ObjectId
  groups           Group[]    @relation(fields: [groupIDs], references: [id])
  accountIDs       String[]   @db.ObjectId
  accounts         Account[]  @relation("AccountUsers", fields: [accountIDs], references: [id])
  adminAccountIDs  String[]   @db.ObjectId
  adminAccounts    Account[]  @relation("AccountAdmins", fields: [adminAccountIDs], references: [id])
  activityIDs      String[]   @db.ObjectId
  activities       Activity[] @relation()
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}
